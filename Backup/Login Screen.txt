// Login Screen
@Composable
fun LoginApp() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(background),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        BlobUi()
        Spacer(modifier = Modifier.height((-20).dp)) // Reduce la altura entre componentes
        CustomLoginScreen()
    }
}

@Composable
fun BlobUi() {
    val blob = painterResource(R.drawable.blob)
    Box(modifier = Modifier.wrapContentHeight()) {
        Image(
            painter = blob,
            contentDescription = null,
            contentScale = ContentScale.Crop,
            alignment = Alignment.TopEnd,
            modifier = Modifier.absoluteOffset(x = (-40).dp, y = (-190).dp)
        )
        Text(
            text = stringResource(R.string.blob_ui_text),
            fontWeight = FontWeight.Bold,
            color = Color.White,
            fontSize = 40.sp,
            fontFamily = bodyFontFamily,
            textAlign = TextAlign.Start,
            modifier = Modifier.absoluteOffset(x = 20.dp, y = 80.dp)
        )
    }
}

@Composable
fun CustomLoginScreen() {
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        CustomTextField(
            value = email,
            label = stringResource(R.string.Label_name_input_user),
            onValueChange = { email = it },
            isEnabled = true,
            KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Password,
                imeAction = ImeAction.Done,
            ),
            R.drawable.user_icon,
            primary
        )

        CustomTextField(
            value = password,
            label = stringResource(R.string.Label_name_Input_password),
            onValueChange = { password = it },
            isEnabled = true,
            KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Password,
                imeAction = ImeAction.Done,
            ),
            R.drawable.lock_icon,
            primary
        )

        // Usamos ButtonApp en lugar de Button
        ButtonApp(stringResource(R.string.name_button_login),{/*TODO*/})
    }
}